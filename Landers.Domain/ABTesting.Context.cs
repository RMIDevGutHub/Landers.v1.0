//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Landers.Domain
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ABTestingEntities : DbContext
    {
        public ABTestingEntities()
            : base("name=ABTestingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ABTest> ABTests { get; set; }
        public virtual DbSet<ConversionResult> ConversionResults { get; set; }
        public virtual DbSet<DeviceType> DeviceTypes { get; set; }
        public virtual DbSet<MasterLayoutTemplate> MasterLayoutTemplates { get; set; }
        public virtual DbSet<Replacement> Replacements { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<Variation> Variations { get; set; }
    
        public virtual ObjectResult<Nullable<int>> sp_CheckIfInATest(string url, Nullable<int> deviceType)
        {
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var deviceTypeParameter = deviceType.HasValue ?
                new ObjectParameter("deviceType", deviceType) :
                new ObjectParameter("deviceType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CheckIfInATest", urlParameter, deviceTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetandUpdateVariationsInformation_Result> sp_GetandUpdateVariationsInformation(Nullable<decimal> testId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("testId", testId) :
                new ObjectParameter("testId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetandUpdateVariationsInformation_Result>("sp_GetandUpdateVariationsInformation", testIdParameter);
        }
    
        public virtual ObjectResult<sp_GetBaseReplacements_Result> sp_GetBaseReplacements(string url, Nullable<bool> @bool)
        {
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("Bool", @bool) :
                new ObjectParameter("Bool", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBaseReplacements_Result>("sp_GetBaseReplacements", urlParameter, boolParameter);
        }
    
        public virtual ObjectResult<sp_GetReplacements_Result> sp_GetReplacements(string url, Nullable<bool> @bool)
        {
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var boolParameter = @bool.HasValue ?
                new ObjectParameter("Bool", @bool) :
                new ObjectParameter("Bool", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReplacements_Result>("sp_GetReplacements", urlParameter, boolParameter);
        }
    
        public virtual ObjectResult<sp_GetTestInformation_Result> sp_GetTestInformation(string url, Nullable<int> dviceType)
        {
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var dviceTypeParameter = dviceType.HasValue ?
                new ObjectParameter("dviceType", dviceType) :
                new ObjectParameter("dviceType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTestInformation_Result>("sp_GetTestInformation", urlParameter, dviceTypeParameter);
        }
    }
}
