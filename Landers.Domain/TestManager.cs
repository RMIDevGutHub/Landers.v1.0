using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Web;
using System.Text;
using System.Threading.Tasks;

namespace Landers.Domain
{
    /// <summary>
    /// 
    /// </summary>
    public sealed class TestManager
    {

        #region Feilds, Constructor, Properties
        //private Media _media;
        private HttpCookie _cookie;
        private Boolean _isTest;
        private String _host;
        private String _authority;
        private Int32 _variationid;
        private sp_GetTestInformation_Result _testdata;
        private sp_GetandUpdateVariationsInformation_Result _variationsdata;
        private List<sp_GetReplacements_Result> _replacementlist;

        /// <summary>
        /// CookieName the name of the refinement test cookie. Its a const.
        /// </summary>
        public const String CookieName = "_ABTesting";
        // Properties
        /// <summary>
        /// Cookie generated by class for test purposes
        /// </summary>
        public HttpCookie Cookie
        {
            get { return _cookie; }
            set { _cookie = value; }
        }
        /// <summary>
        /// Value determined by class signifying if this is a test instance
        /// </summary>
        public Boolean IsTest
        {
            get { return _isTest; }
            set { _isTest = value; }
        }
        /// <summary>
        /// Contains media information from query string
        /// </summary>
        //public Media Media
        //{
        //    get { return _media; }
        //    set { _media = value; }
        //}

        /// <summary>
        /// Contains site url inofrmation from the URI object
        /// </summary>
        public String Host
        {
            get { return _host; }
            set { _host = value; }
        }

        /// <summary>
        /// Contains site url inofrmation from the URI object
        /// </summary>
        public String Authority
        {
            get { return _authority; }
            set { _authority = value; }
        }

        /// <summary>
        /// Contains current variation id to use for the view enguine
        /// </summary>
        public Int32 VariationId
        {
            get { return _variationid; }
            set { _variationid = value; }
        }

        /// <summary>
        /// Contains current test information
        /// </summary>
        public sp_GetTestInformation_Result testData
        {
            get { return _testdata; }
            set { _testdata = value; }
        }

        /// <summary>
        /// Contains current test variations information
        /// </summary>
        public sp_GetandUpdateVariationsInformation_Result variationsData
        {
            get { return _variationsdata; }
            set { _variationsdata = value; }
        }

        /// <summary>
        /// Contains current test replacement list
        /// </summary>
        public List<sp_GetReplacements_Result> replacementList
        {
            get { return _replacementlist; }
            set { _replacementlist = value; }
        }


        // Constructors
        /// <summary>
        /// Default constructor
        /// </summary>
        public TestManager() : base() { }

        #endregion

        /// <summary>
        /// Creates an instance of class and runs all other methods to populate properties
        /// </summary>
        /// <param name="requestObject">Contains the current context response object </param>
        /// <param name="deviceTypeId"> </param>
        public TestManager(HttpRequest requestObject, Int32 deviceTypeId)
        {
            try
            {

                //-- step 1) Check the user is not already cookied. If they are then use that information --

                //-- step 2) Check that this url is in a test. ---
                //this.Authority = requestObject.Url.Authority; //requestObject.Url.Host; // ConfigurationManager.AppSettings["SEORefinementSite"];
                this.Authority = "localhost:57815"; //-- used for testing from home.

                using (ABTestingEntities dbContext = new ABTestingEntities())
                {
                    this.CheckTest(deviceTypeId, dbContext);

                    //-- step 3) If in a test then set all test information. ---
                    if (this.IsTest)
                    {
                        //-- Get current test information based off of url. *** Can be added to Checktest, no reason to make the same call twice. JL
                        this._testdata = dbContext.sp_GetTestInformation(this.Authority, deviceTypeId).Single();

                        //-- Get variations for the test.
                        this._variationsdata = GetVariationId(Convert.ToInt32(testData.Id), dbContext); //-- only set impression when setting test cookie

                        //-- Get list of replacements for the current test.
                        this._replacementlist = Replacements(requestObject.Url.Authority, variationsData.Base, dbContext);

                        //-- Generate Test Cookie.
                        this.GenerateCookie(this._testdata, requestObject, this._variationsdata, deviceTypeId);
                    }
                }

                //HttpCookie cookie = TestManager.ReturnTestCookie();
                //this.VariationId = (cookie != null) ? Convert.ToInt32(cookie["VariationId"]) : 0;            


                //this.Media = media;
            }
            catch (Exception ex)
            {
                //--- what error handeling do I add here ? --- //
            }
        }


        // Methods
        /// <summary>
        /// Checks to see if the current site is in a test through the site host name and active bool, shoudl default to false.
        /// </summary>
        private void CheckTest(Int32 deviceTypeId, ABTestingEntities dbContext)
        {
            //this.IsTest = false;
            this.IsTest = dbContext.sp_CheckIfInATest(this.Authority, deviceTypeId).Any();
        }

        /// <summary>
        /// If instance is verified as a test, pulls test information from entity and populates a cookie 
        /// as well as media parameters to be used for implementing the test.
        /// </summary>
        private void GenerateCookie(sp_GetTestInformation_Result testData, HttpRequest requestObject, sp_GetandUpdateVariationsInformation_Result variationsResult, Int32 deviceTypeId)
        {

            bool setCookie = true;

            if (this.IsTest)
            {
                try
                {
                    String checkCookie = String.Format("{0}{1}", this.Authority, CookieName);

                    if (requestObject.Cookies[checkCookie] != null)
                        setCookie = false;


                    //-- If the cookies is not set or the set cookies does not match the current test cookie then set test. ---
                    //public decimal Id { get; set; }
                    //public Nullable<decimal> TestId { get; set; }
                    //public string Variation { get; set; }
                    //public string Description { get; set; }
                    //public string ViewName { get; set; }
                    //public bool DefaultView { get; set; }
                    //public bool Base { get; set; }
                    //public string TemplateName { get; set; }
                    //public decimal Impressions { get; set; }


                    if ((setCookie))
                    {
                        sp_GetandUpdateVariationsInformation_Result variationData = variationsResult; //GetVariationId(Convert.ToInt32(testData.Id)); //-- only set impression when setting test cookie
                        this.VariationId = Convert.ToInt32(variationData.Id);
                        this.Cookie = new HttpCookie(checkCookie);
                        this.Cookie["TestId"] = testData.Id.ToString(CultureInfo.InvariantCulture);
                        this.Cookie["VariationId"] = variationData.Id.ToString(CultureInfo.InvariantCulture);
                        this.Cookie["SiteId"] = testData.SiteId.ToString();
                        this.Cookie["DescriptiveName"] = variationData.Variation;
                        this.Cookie["StartDate"] = testData.StartDate.ToString();
                        this.Cookie["EndDate"] = testData.EndDate.ToString();
                        this.Cookie["Impression"] = variationData.Impressions.ToString(CultureInfo.InvariantCulture);
                        this.Cookie["Host"] = this.Host;
                        this.Cookie["TemplateName"] = variationData.ViewName;
                        this.Cookie["LayoutPage"] = variationData.TemplateName;
                        this.Cookie["viewType"] = (!variationData.Base) ? "replacement" : "base";
                        this.Cookie["DeviceType"] = deviceTypeId == 2 ? "mobile" : "desktop"; //-- View TestingRenderingEnguine line 141 for explination.
                        this.Cookie.Expires = DateTime.Now.AddMonths(6);
                        requestObject.Cookies.Add(this.Cookie);
                    }

                }
                catch (Exception ex)
                {
                    this.IsTest = false;
                }
            }
            else
            {
                //-- No test going on. If cookie is set then expire the cookie. ----
                if (this.Cookie != null)
                    this.Cookie.Expires = DateTime.Now.AddDays(-1d);

                return;
            }

        }

        /// <summary>
        /// Returns the current variations object also sets the impressions for test results.
        /// </summary>
        /// <param name="testId">Contains the id for the current test on the site.</param>
        private static sp_GetandUpdateVariationsInformation_Result GetVariationId(int testId, ABTestingEntities dbContext)
        {
            //try
            //{                
            sp_GetandUpdateVariationsInformation_Result variationData = dbContext.sp_GetandUpdateVariationsInformation(testId).First();
            return variationData;
            //}
            //catch (Exception ex) {
            //    return null;
            //}
        }

        /// <summary>
        /// Gets a collection of base views. Based on the last winner
        /// </summary>
        /// <param name="hostname">Contains the host name of the site.</param>
        /// <returns></returns>
        //public static List<sp_GetBaseReplacements_Result> BaseReplacements(String hostname)
        //{
        //    try
        //    {
        //        using (ABTestingEntities dbContext = new ABTestingEntities())
        //        {
        //            //List<Replacements> replacementViews = (from replacementInfo in dbContext.Replacements
        //            //                                      join variationInfo in dbContext.Variations on replacementInfo.VariationId equals variationInfo.Id
        //            //                                      join testInfo in dbContext.ABTests on variationInfo.TestId equals testInfo.Id
        //            //                                      join siteInfo in dbContext.Sites on testInfo.SiteId equals siteInfo.Id
        //            //                                      where siteInfo.SiteName == hostname && variationInfo.Base == true
        //            //                                      select replacementInfo).ToList();

        //            List<sp_GetBaseReplacements_Result> replacementBaseViews = dbContext.sp_GetBaseReplacements(hostname).ToList();

        //            return replacementBaseViews;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }

        //}

        /// <summary>
        /// Gets a collection of views to replace by the variation id
        /// </summary>
        /// <param name="url">Contains the url of the current site</param>
        /// <param name="isbase">Contains a boolen representing if its a base replacement or not.</param>
        /// <returns></returns>
        public static List<sp_GetReplacements_Result> Replacements(String url, Boolean isbase, ABTestingEntities dbContext)
        {

            List<sp_GetReplacements_Result> replacementViews = dbContext.sp_GetReplacements(url, isbase).ToList();

            return replacementViews;


        }

        /// <summary>
        /// Gets the current sites test cookie if it is set.
        /// </summary>
        /// <returns>Return an HttpCokie object representing a test cookie</returns>
        public static HttpCookie ReturnTestCookie()
        {
            String hostName = ConfigurationManager.AppSettings["SEORefinementSite"];
            String cookieName = String.Format("{0}{1}", hostName, TestManager.CookieName);
            HttpCookie cookie = HttpContext.Current.Request.Cookies[cookieName];

            return cookie;
        }

    }
}
